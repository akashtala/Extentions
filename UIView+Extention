

import UIKit

private var topRightRadiusKey: UInt8 = 0
private var bottomLeftRadiusKey: UInt8 = 0

//MARK: UIVIEW
extension UIView {
    
    func roundCorners(corners: UIRectCorner, radius: CGFloat) {
        let path = UIBezierPath(roundedRect: bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))
        let mask = CAShapeLayer()
        mask.path = path.cgPath
        layer.mask = mask
    }
    
    @IBInspectable
    var CornerRadius: CGFloat {
        get {
            return layer.cornerRadius
        }
        set {
            layer.cornerRadius = newValue
        }
    }
    
    @IBInspectable
    var borderWidth: CGFloat {
        get {
            return layer.borderWidth
        }
        set {
            layer.cornerRadius = 5
            layer.borderWidth = newValue
        }
    }
    
    @IBInspectable
    var borderColor: UIColor? {
        get {
            if let color = layer.borderColor {
                return UIColor(cgColor: color)
            }
            return nil
        }
        set {
            if let color = newValue {
                layer.borderColor = color.cgColor
            } else {
                layer.borderColor = nil
            }
        }
    }
    
    @IBInspectable
    var shadowRadius: CGFloat {
        get {
            return layer.shadowRadius
        }
        set {
            layer.shadowRadius = newValue
        }
    }
    
    @IBInspectable
    var shadowOpacity: Float {
        get {
            return layer.shadowOpacity
        }
        set {
            layer.shadowOpacity = newValue
        }
    }
    
    @IBInspectable
    var shadowOffset: CGSize {
        get {
            return layer.shadowOffset
        }
        set {
            layer.shadowOffset = newValue
        }
    }
    
    @IBInspectable
    var shadowColor: UIColor? {
        get {
            if let color = layer.shadowColor {
                return UIColor(cgColor: color)
            }
            return nil
        }
        set {
            if let color = newValue {
                layer.shadowColor = color.cgColor
            } else {
                layer.shadowColor = nil
            }
        }
    }
    
    @IBInspectable
       var backgoundImage: UIImage{
           get{
               return self.backgoundImage
           }
           set{
               let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: self.frame.width, height: self.frame.height))
               imageView.image = newValue
               imageView.contentMode = .scaleToFill
               self.addSubview(imageView)
               sendSubviewToBack(imageView)
           }
       }
    
    @IBInspectable
    var makeCircular: Bool{
        get{
            return false
        }
        set{
            self.layer.cornerRadius = bounds.height / 2
        }
    }
    
    @IBInspectable
    var animateShadow: Bool{
        get{
            return false
        }
        set {
            let animation = CABasicAnimation(keyPath: "shadowOpacity")
            animation.fromValue = 0.0
            animation.toValue = 1.0
            animation.duration = 0.5
            animation.autoreverses = true
            animation.repeatCount = Float.infinity
            layer.shadowColor = UIColor.white.cgColor
            layer.shadowOffset = CGSize(width: 0, height: 0)
            layer.shadowOpacity = 1
            layer.shadowRadius = 10
            layer.add(animation, forKey: "shadowOpacityAnimation")
        }
    }
    
    func stopAnimatingShadow() {
        layer.removeAllAnimations()
    }
    
    func setAnchorPoint(_ point: CGPoint) {
            var newPoint = CGPoint(x: bounds.size.width * point.x, y: bounds.size.height * point.y)
            var oldPoint = CGPoint(x: bounds.size.width * layer.anchorPoint.x, y: bounds.size.height * layer.anchorPoint.y);

            newPoint = newPoint.applying(transform)
            oldPoint = oldPoint.applying(transform)

            var position = layer.position

            position.x -= oldPoint.x
            position.x += newPoint.x

            position.y -= oldPoint.y
            position.y += newPoint.y

            layer.position = position
            layer.anchorPoint = point
    }

    func downloadAsImage() -> UIImage? {
        UIGraphicsBeginImageContext(CGSize(width: self.frame.size.width, height: self.frame.size.height))
        self.drawHierarchy(in: CGRect(x: 0.0, y: 0.0, width: self.frame.size.width, height: self.frame.size.height), afterScreenUpdates: true)
        let image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        return image
    }
    
    private func scale(by scale: CGFloat) {
        self.contentScaleFactor = scale
        for subview in self.subviews {
            subview.scale(by: scale)
        }
    }
    
    func takeScreenshot(with scale: CGFloat? = nil) -> UIImage {
        let newScale = scale ?? UIScreen.main.scale
        self.scale(by: newScale)
        let format = UIGraphicsImageRendererFormat()
        format.scale = newScale
        let renderer = UIGraphicsImageRenderer(size: self.bounds.size, format: format)
        let image = renderer.image { rendererContext in
            self.layer.render(in: rendererContext.cgContext)
        }
        return image
    }

    @IBInspectable var topRightRadius: CGFloat {
          get {
              return objc_getAssociatedObject(self, &topRightRadiusKey) as? CGFloat ?? 0
          }
          set {
              objc_setAssociatedObject(self, &topRightRadiusKey, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
              applyCorners()
          }
      }
      
      @IBInspectable var bottomLeftRadius: CGFloat {
          get {
              return objc_getAssociatedObject(self, &bottomLeftRadiusKey) as? CGFloat ?? 0
          }
          set {
              objc_setAssociatedObject(self, &bottomLeftRadiusKey, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
              applyCorners()
          }
      }
      
      private func applyCorners() {
          let path = UIBezierPath()

          // Top-left corner (no rounding here)
          path.move(to: CGPoint(x: 0, y: 0))
          
          // Top-right corner rounding
          if topRightRadius > 0 {
              path.addLine(to: CGPoint(x: bounds.width - topRightRadius, y: 0))
              path.addArc(withCenter: CGPoint(x: bounds.width - topRightRadius, y: topRightRadius), radius: topRightRadius, startAngle: -.pi / 2, endAngle: 0, clockwise: true)
          } else {
              path.addLine(to: CGPoint(x: bounds.width, y: 0))
          }
          
          // Bottom-right corner (no rounding here)
          path.addLine(to: CGPoint(x: bounds.width, y: bounds.height))
          
          // Bottom-left corner rounding
          if bottomLeftRadius > 0 {
              path.addLine(to: CGPoint(x: bottomLeftRadius, y: bounds.height))
              path.addArc(withCenter: CGPoint(x: bottomLeftRadius, y: bounds.height - bottomLeftRadius), radius: bottomLeftRadius, startAngle: .pi / 2, endAngle: .pi, clockwise: true)
          } else {
              path.addLine(to: CGPoint(x: 0, y: bounds.height))
          }
          
          // Complete path
          path.addLine(to: CGPoint(x: 0, y: 0))
          path.close()

          // Apply the mask
          let mask = CAShapeLayer()
          mask.path = path.cgPath
          layer.mask = mask
      }
}
