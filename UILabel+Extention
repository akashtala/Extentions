//
//  UILabel+Extention.swift
//
//  Created by Akash on 05/04/24.
//

import Foundation
import UIKit

extension UILabel {
    @IBInspectable
    var setImage: UIImage? {
        get {
            return nil
        }
        set {
            let image = newValue?.resizeImage(to: self.frame.size)
            let color = UIColor(patternImage: image ?? UIImage())
            self.textColor = color
        }
    }

    func adjustFontSizeToFitLabel() {
        guard let text = self.text, !text.isEmpty else { return }
        let labelSize = self.frame.size
        var fontSize: CGFloat = 100.0
        while true {
            let attributes: [NSAttributedString.Key: Any] = [.font: UIFont.systemFont(ofSize: fontSize)]
            let attributedText = NSAttributedString(string: text, attributes: attributes)
            let rect = attributedText.boundingRect(with: CGSize(width: labelSize.width, height: .greatestFiniteMagnitude),
                                                   options: .usesLineFragmentOrigin, context: nil)
            if rect.size.width < labelSize.width && rect.size.height < labelSize.height {
                break
            }
            fontSize -= 1.0
            if fontSize < 10.0 {
                break
            }
        }
        self.font = UIFont.systemFont(ofSize: fontSize)
    }

   func highlight(_ text: String, color: UIColor, font:UIFont) {
        guard let labelText = self.text else { return }
        let range = (labelText as NSString).range(of: text)

        let mutableAttributedString = NSMutableAttributedString.init(string: labelText)
        mutableAttributedString.addAttribute(NSAttributedString.Key.foregroundColor, value: color, range: range)
        mutableAttributedString.addAttribute(NSAttributedString.Key.font, value: font, range: range)
        self.attributedText = mutableAttributedString
    }
}
